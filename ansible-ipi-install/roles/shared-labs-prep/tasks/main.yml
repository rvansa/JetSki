---
- name: Randomize cluster name
  set_fact:
    cluster: "{{ cluster }}{{ 1000 | random }}"
  when: cluster_random | default(false) | bool

- name: Install packages
  yum:
    name: "{{ yum_packages }}"
    state: latest
  become: yes

- name: Install RDO Packages
  yum:
    name: "{{ rdo_packages }}"
    state: latest
    disable_gpg_check: yes
  become: yes

- name: Badfish related tasks
  block:
    - name: Create temp directory for badfish
      tempfile:
        state: directory
      register: badfish_tempdir

    - name: Get Badfish master branch
      git:
        repo: https://github.com/redhat-performance/badfish.git
        dest: "{{ badfish_tempdir.path }}"
        force: yes

    - name: Set badfish venv
      set_fact:
        badfish_venv: "{{ badfish_tempdir.path}}/.venv"

    - name: Create badfish venv
      command: python3 -m venv {{ badfish_venv }} creates={{ badfish_venv }}

    - name: Update pip
      pip:
        name: pip
        state: latest
        virtualenv_command: /usr/bin/python3 -m venv
        virtualenv: "{{ badfish_venv }}"

    - name: Install badfish requirements
      pip:
        requirements: "{{ badfish_tempdir.path}}/requirements.txt"
        virtualenv_command: /usr/bin/python3 -m venv
        virtualenv: "{{ badfish_venv }}"
  when: dell_nodes | length > 0

- name: Clean network interfaces created by lab automation
  shell: |
    /root/clean-interfaces.sh --nuke
  become: true
  ignore_errors: true

- name: Delete {{ pub_nic }} due to modify nmcli bug
  nmcli:
    conn_name: "{{ pub_nic }}"
    type: ethernet
    state: absent
  become: yes

- name: Delete virbr0 to avoid conflicts with BM network
  nmcli:
    conn_name: virbr0
    type: ethernet
    state: absent
  become: yes
  when: "'virbr0' in ansible_interfaces and ansible_virbr0 is defined and ansible_virbr0.active"

- name: Get baremetal bridge slave devices
  shell: |
    bridge link | grep baremetal | grep -v vnet | awk '{print $2}' | awk -F: '{print $1}' | uniq
  become: yes
  register: baremetal_slave_devices

- name: Get baremetal bridge slave connections
  shell: |
    nmcli con show | grep {{ item }} | awk '{print $1}' | uniq
  become: yes
  with_items: "{{ baremetal_slave_devices.stdout_lines }}"
  when: "{{ baremetal_slave_devices.stdout_lines }}"
  register: baremetal_slave_connections

- name: Delete baremetal bridge slaves
  nmcli:
    conn_name: "{{ item.stdout_lines.0 }}"
    state: absent
  with_items: "{{ baremetal_slave_connections.results }}"
  when: "{{ baremetal_slave_connections }}"
  become: yes

- name: Delete baremetal bridge
  nmcli:
    conn_name: baremetal
    state: absent
  become: yes

- name: Create Bridge labeled baremetal (IPv4)
  nmcli:
    conn_name: baremetal
    type: bridge
    ifname: baremetal
    autoconnect: yes
    stp: off
    ip4_method: manual
    ip4: "{{ extcidrnet | next_nth_usable(extcidrnet_offset + 1) }}/{{ extcidrnet | ipaddr('prefix') }}"
    ip6_method: disabled
    state: present
  become: yes
  when: not ipv6_enabled|bool or ipv4_baremetal|bool

- name: Create Bridge labeled baremetal (Dual-Stack)
  nmcli:
    conn_name: baremetal
    type: bridge
    ifname: baremetal
    autoconnect: yes
    stp: off
    ip4_method: manual
    ip4: "{{ extcidrnet | next_nth_usable(extcidrnet_offset + 1) }}/{{ extcidrnet | ipaddr('prefix') }}"
    state: present
    ip6: "{{ extcidrnet6 | next_nth_usable(extcidrnet_offset + 1) }}/{{ extcidrnet6 | ipaddr('prefix') }}"
    ip6_method: manual
  become: yes
  when: ipv6_enabled|bool and dualstack_baremetal|bool


#Moving the dns entry to this task because of above problem
- name: Set Bridge DNS priority
  shell: |
    nmcli con mod baremetal ipv4.dns {{ extcidrnet | next_nth_usable(extcidrnet_offset + 1) }} ipv4.dns-priority 10
  become: yes
  when: (not ipv6_enabled|bool) or
        (ipv4_baremetal|bool) or
        (dualstack_baremetal|bool)

- name: Create Bridge slave on {{ pub_nic }}
  nmcli:
    conn_name: "{{ pub_nic }}"
    type: bridge-slave
    hairpin: no
    ifname: "{{ pub_nic }}"
    master: baremetal
    autoconnect: yes
    state: present
  become: yes

- name: Set MTU
  nmcli:
    conn_name: "{{ pub_nic }}"
    type: ethernet
    mtu: "{{ 9000 if jumbo_mtu else 1500 }}"
    state: present
  become: true

- name: Reload baremetal bridge and slave interfaces
  shell: |
    /usr/bin/nmcli con reload {{ item }}; /usr/bin/nmcli con up {{ item }}
  with_items:
    - baremetal
    - "{{ pub_nic }}"
  become: yes

- name: Power on master nodes
  ipmi_power:
    name: "mgmt-{{ item }}"
    user: "{{ lab_ipmi_user }}"
    password: "{{ lab_ipmi_password }}"
    state: on
  with_items: "{{ master_fqdns }}"
  register: power_on_masters
  until: power_on_masters is succeeded
  retries: 3
  delay: 30
  tags:
    - bootorder

- name: Power on worker nodes
  ipmi_power:
    name: "mgmt-{{ item }}"
    user: "{{ lab_ipmi_user }}"
    password: "{{ lab_ipmi_password }}"
    state: on
  with_items: "{{ worker_fqdns }}"
  register: power_on_workers
  until: power_on_workers is succeeded
  retries: 3
  delay: 30
  tags:
    - bootorder

- name: Dell Boot Order tasks (Dell)
  block:
    - include_tasks: 10_redfish_queue.yml
      with_items:
        - "{{ dell_nodes }}"

    - name: Wait for iDrac to be responsive (check via --check-boot for Dell) 
      shell:
        chdir: "{{ badfish_tempdir.path }}"
        cmd: |
          source {{ badfish_venv }}/bin/activate
          {{ badfish_cmd }}{{ item }} --check-boot
      with_items:
        - "{{ dell_nodes }}"
      register: wait_for_idrac
      until: wait_for_idrac is succeeded
      retries: 10
      delay: 30
      ignore_errors: true

    - include_tasks: 20_set_director_mode.yml
      with_items:
        - "{{ dell_nodes }}"

  when: dell_nodes | length > 0
  tags:
    - bootorder

- name: Supermicro Boot order to PXE
  block:
    - name: Boot order for legacy mode
      shell: ipmitool -I lanplus -H mgmt-{{ item }} -U {{ lab_ipmi_user }} -P {{ lab_ipmi_password }} chassis bootdev pxe options=persistent
      with_items:
        - "{{ supermicro_nodes }}"
      when:
        - bootmode is defined
        - bootmode == 'legacy'

    - name: Boot order for UEFI mode
      shell: ipmitool -I lanplus -H mgmt-{{ item }} -U {{ lab_ipmi_user }} -P {{ lab_ipmi_password }} raw 0x0 0x8 0x05 0xe0 0x04 0x0 0x0 0x0
      with_items:
        - "{{ supermicro_nodes }}"
      when:
        - ( bootmode is not defined ) or ( bootmode != 'legacy' )

    - name: Power cycle supermicro nodes
      shell: |
        ipmitool -I lanplus -H mgmt-{{ item }} -U {{ lab_ipmi_user }} -P {{ lab_ipmi_password }} power cycle
      with_items:
        - "{{ supermicro_nodes }}"

    - name: Wait for few seconds till it boots
      wait_for:
        timeout: 300

  when: supermicro_nodes | length > 0
  tags:
    - bootorder
  
- name: Set SELinux permissive
  selinux:
    policy: targeted
    state: permissive
  become: yes

- name: Stop dnsmasq service
  systemd:
    name: dnsmasq
    state: stopped
  become: yes

- name: Clear dnsmasq leases
  file:
    path: /var/lib/dnsmasq/dnsmasq.leases
    state: absent
  become: yes

- name: Configure dnsmasq for baremetal
  template:
    src: ocp4-lab.dnsmasq.conf.j2
    dest: /etc/dnsmasq.d/ocp4-lab.conf
    mode: 0640
  become: yes

- name: Configure dnsmasq service to start after network is online
  lineinfile:
    regexp: "^After=network.target"
    line: "After=network-online.target"
    backrefs: yes
    path: "/usr/lib/systemd/system/dnsmasq.service"
  become: yes

#FIXME
- name: Configure firewall
  iptables:
    flush: yes
  become: yes

- name: Configure NAT
  iptables:
    table: nat
    chain: POSTROUTING
    source: "{{ extcidrnet }}"
    destination: "!{{ extcidrnet }}"
    out_interface: "{{ lab_pub_nic }}"
    jump: MASQUERADE
  become: yes

- name: Save iptables configuration
  shell: |
    /usr/sbin/iptables-save > /etc/sysconfig/iptables
  become: yes

- name: Enable and start dnsmasq service
  systemd:
    name: dnsmasq
    state: started
    enabled: yes
  become: yes

- name: Create Manifest folder
  block:
    - name: Set manifest directory path
      set_fact:
        manifest_path: "{{ playbook_dir }}/roles/installer/files/openshift/"
      
    - name: Clean up any existing manifest content
      file:
        path: "{{ item }}"
        state: absent
      with_fileglob:
        - "{{ manifest_path }}*"

    - name: Copy machine config file to Disable public nic
      template:
        src: ocp4-lab.machineconfig.yml.j2
        dest: "{{ manifest_path }}/50-disable-lab-public-nic-{{ node_item }}.yaml"
        mode: 0644
      with_items:
        - "master"
        - "worker"
      loop_control:
          loop_var: node_item

    - name: Copy OVN hybrid manifest files 
      copy:
        src: "{{ item }}"
        dest: "{{ manifest_path }}/{{ item }}"
        mode: 0644
      with_items: 
        - "99_openshift-cluster-network.yaml"
      when:
        - network_type == "OVNKubernetes" 
        - ovn_hybird_plugin | bool     

    - name: Enable OVN local gateway mode
      copy:
        src: "{{ item }}"
        dest: "{{ manifest_path }}/{{ item }}"
        mode: 0644
      with_items:
        - "99_local_gateway_ovn.yaml"
      when:
        - network_type == "OVNKubernetes"
        - ovn_local_gateway is defined and ovn_local_gateway | bool

    - name: Copy SCTP module manifest files
      template:
        src: "{{ item }}"
        dest: "{{ manifest_path }}/{{ item }}"
        mode: 0644
      with_items:
        - "ocp4-lab.machineconfig.yml.j2"
      when:
        - sctp | bool

  delegate_to: localhost

- name: Copy the approve_csr script from the local machine to the remote server
  copy:
    src: ./approve_csr.bash
    dest: "/home/{{ ansible_user }}/"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  become: yes
  when: worker_count != 0

- name: Approve CSRs
  poll: 0
  async: 20000
  shell: "bash /home/{{ ansible_user }}/approve_csr.bash {{ worker_count }}"
  register: approve_csr_result
  when: worker_count != 0

- name: Approve CSRs Debug
  debug:
    var: approve_csr_result
  when: worker_count != 0
