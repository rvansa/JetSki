---
- name: Clean network interfaces created by lab automation
  shell: |
    /root/clean-interfaces.sh --nuke
  become: true
  ignore_errors: true

- name: Regather facts for updated interfaces
  setup:

- name: Get the bm mac address on provisioner node
  set_fact:
    bm_mac: "{{ ( routable_api | bool ) | ternary (hostvars[groups['orchestration'][0]]['ocpinv_content']['nodes'][prov_index|int].mac[-1] | lower, hostvars[groups['orchestration'][0]]['ocpinv_content']['nodes'][prov_index|int].mac[3] | lower) }}"

- name: Get the bm provisioning address on provisioner node
  set_fact:
    prov_mac: "{{ hostvars[groups['orchestration'][0]]['ocpinv_content']['nodes'][prov_index|int].mac[1] | lower }}"

- debug:
    msg: "bm_mac = {{ bm_mac }} and prov_mac = {{ prov_mac }}"

- name: Set the lab public nic
  set_fact: 
    lab_pub_nic: "{{ ansible_default_ipv4['interface'] }}"

# Need to do this as the ansible facts per interface use the naming convention with _ and not -
- name: Set eligible interfaces list
  set_fact:
    ansible_eligible_interfaces: "{{ ansible_eligible_interfaces | default([]) + [item | replace('-','_')] }}"
  with_items:
    - "{{ ansible_interfaces }}"

# Remove vlaned interfaces from eligible list
- name: Removing vlaned interfaces
  set_fact:
    ansible_eligible_interfaces: "{{ ansible_eligible_interfaces | reject('search', '[.]') | list }}"

- name: Get the bm interface
  set_fact:
    pub_nic: "{{ item }}"
  when: ansible_{{ item }}.macaddress is defined and ansible_{{ item}}.type == "ether" and ansible_{{ item }}.macaddress == bm_mac
  with_items:
    - "{{ ansible_eligible_interfaces }}"

- name: Get the provisioning interface
  set_fact:
    prov_nic: "{{ item }}"
  when: ansible_{{ item }}.macaddress is defined and ansible_{{ item }}.type == "ether" and ansible_{{ item }}.macaddress == prov_mac
  with_items:
    - "{{ ansible_eligible_interfaces }}"

- name: Set lab_pub_nics for master
  set_fact:
    lab_pub_nics: []      

- name: Set lab_pub_nics for master
  set_fact:
    lab_pub_nics: ["eno1"]
  when: ( 'r640' in master_types ) or ( 'r640' in worker_types )

- name: Setting public and prov nics 
  block:
    - name: Set master public nics
      set_fact:
        lab_pub_nics:  "{{ lab_pub_nics + [ lab_vars['machine_types'][item.0][item.1]['pub_nic'] ]  }}"
      with_together: 
        - "{{ master_vendors }}"
        - "{{ master_types }}"

    - name: Set worker public nics
      set_fact:
        lab_pub_nics:  "{{ lab_pub_nics + [ lab_vars['machine_types'][item.0][item.1]['pub_nic'] ]  }}"
      with_together: 
        - "{{ worker_vendors }}"
        - "{{ worker_types }}"

    - block:       
        - name: Set provisioning interface
          set_fact:
            masters_prov_nic: "{{ lab_vars['machine_types'][item.0][item.1]['prov_nic_f04'] if 'r640' in master_fqdns[0].split('.')[0].split('-') and 'f04' in master_fqdns[0].split('.')[0].split('-') else lab_vars['machine_types'][item.0][item.1]['prov_nic'] }}"
          with_together: 
            - "{{ master_vendors }}"
            - "{{ master_types }}"
          when: 
            - ( '1029u' not in master_types )

        - name: Echo provisioning interface
          debug:
            msg: Script using defined Provisioning interface - {{ masters_prov_nic }} from the inventory.
          when: 
            - ( '1029u' in master_types )
          failed_when: masters_prov_nic is not defined or masters_prov_nic == ""
      when: 
        - master_types | unique != [provisioner_type] or 'r640' in master_fqdns[0].split('.')[0].split('-')
  vars:
    lab_vars: "{{ (lab_name == 'scale') | ternary(scale, alias) }}"
  when: lab_name in ['scale', 'alias']

- name: set disabled nics to lab_pub_nics
  set_fact:
    disable_nics: "{{ lab_pub_nics | unique }}"


- name: Including clusterA interface
  set_fact:
    disable_nics: "{{ disable_nics + ['eno3']  }}"

- debug: 
    msg: "{{ disable_nics }}"  
