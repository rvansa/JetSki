
- name: check
  fail:
    msg: No offset
  when: node_inv_offset == 0

- name: Create temporary directory for inventory
  tempfile:
    state: directory
  register: inventory_tempdir
  when: inventory_hostname != 'localhost'
 
- name: set fact for inv file
  set_fact:
    "{{ item.name }}": "{{ playbook_dir +  '/' + item.path if inventory_hostname == 'localhost' else inventory_tempdir.path + '/' + item.path }}"
  with_items:
    - { name: ocpinv_file, path: ocpinv.json }

- name: check ocpinv file available
  stat:
      path: "{{ ocpinv_file }}"
  register: st

- name: Download ocpinv.json
  block:
    - uri:
        url: "{{ alias.lab_url }}/cloud/{{ cloud_name }}_ocpinventory.json"
        return_content: yes
      register: response
    
    - set_fact:
        ocpinv_content: "{{ response.json }}"
  when: lab_name == "alias"

- name: Download ocpinv.json
  block:
    - uri:
        url: "{{ scale.lab_url }}/cloud/{{ cloud_name }}_ocpinventory.json"
        return_content: yes
      register: response
    
    - set_fact:
        ocpinv_content: "{{ response.json }}"
  when: lab_name == "scale"

- name: Checking for inventory conflicts
  block:
    - name: read inv env file
      slurp:
        src: "{{ ocpinv_file }}"
      register: invfile

    - name: set User inventory fact
      set_fact:
        ocpinv_user_content: "{{ invfile['content'] | b64decode | from_json }}"

    - name: Get node list
      set_fact:
          gold_inv: "{{ ocpinv_content | json_query('nodes[*].pm_addr')  }}"        # QUADS inventory
          user_inv: "{{ ocpinv_user_content | json_query('nodes[*].pm_addr')  }}"   # Local user content

    - name: verify
      set_fact:
          compare_inv: "{{ user_inv | difference(gold_inv) }}"

    - name: Fail when there is an inventory conflicts
      fail:
        msg: Existing User inventory - ocpinv.json is not matching with QUADS inventory for {{ cloud_name }}, please remove existing ocpinv.json if deploying a new cloud. 
      when: compare_inv | length != 0      
  when: st.stat.exists

- name: create ocpinv.json file
  copy:
    dest: "{{ ocpinv_file }}"
    content: "{{ ocpinv_content | to_nice_json }}"
  when: not st.stat.exists

- name: Create final inventory used for deployment
  block:
    - name: read inv env file
      slurp:
        src: "{{ ocpinv_file }}"
      register: finalinv

    - name: set inventory fact
      set_fact:
        ocpinv_content: "{{ finalinv['content'] | b64decode | from_json }}"

- name: set provisioner hostname & index
  set_fact:
    provisioner_hostname: "{{ ocpinv_content.nodes[0].pm_addr | replace('mgmt-','') | replace('-drac', '') }}"
    prov_index: 0
  when: provisioner_hostname is not defined or provisioner_hostname == ""

- block:
  - name: set 'pm_addr' for the specified hostname
    set_fact:
      prov_node: "mgmt-{{ provisioner_hostname }}"

  - name: set provisioner hostname index
    set_fact:
      prov_index: "{{ lookup('ansible.utils.index_of', data=ocpinv_content.nodes, test='eq', key='pm_addr', value=prov_node) }}"
  when: provisioner_hostname is defined and provisioner_hostname != ""    

- name: set ocp_node_content
  set_fact:
      ocp_node_content: |
          {% set a=ocpinv_content.pop('nodes') %}
          {{ ocpinv_content | combine({'nodes': a|difference([a[prov_index|int]])}, recursive=True) }}

- block:
    - debug: 
        var: provisioner_hostname

    - name: set provisioner_type
      set_fact:
        provisioner_type: "{{ (lab_name == 'scale') | ternary(provisioner_hostname.split('.')[0].split('-')[3], provisioner_hostname.split('.')[0].split('-')[2]) }}"
 
    - name: set provisioner_vendor
      set_fact:
        provisioner_vendor: "{{ (provisioner_type in lab_vars['machine_types']['supermicro']) | ternary('supermicro', 'dell') }}"
  vars:
    lab_vars: "{{ (lab_name == 'scale') | ternary(scale, alias) }}"
  when: lab_name in ['scale', 'alias']

- name: dump deploying master nodes to a file
  copy:
    dest: "/tmp/metadata.txt"
    content: "{{ lookup('template', 'node_inv.j2') | to_nice_json  }}"
  become: true
  vars:
    query: nodes[{{ node_inv_offset }}:{{ node_inv_offset + 3 }}]
    node: master
    
- name: read env file
  slurp:
    src: "/tmp/metadata.txt"
  register: master_content

- name: set inventory fact
  set_fact:
    deploying_master_nodes_content: "{{ master_content['content'] | b64decode | from_json }}"

- name: set fact for master mgmt
  set_fact:
    master_mgmts:  "{{ ocp_node_content| json_query('nodes[' ~ node_inv_offset ~ ':' ~ (node_inv_offset + 3) ~ '].pm_addr')}}"

- name: Set worker count
  set_fact:
    worker_count: "{{ ocp_node_content.nodes | length - 3 - node_inv_offset }}"
  when: worker_count is not defined 

- name: Set worker index
  set_fact:
    worker_index: "{{ worker_count | int + node_inv_offset + 3 }}"

- name: dump deploying worker nodes to a file
  copy:
    dest: "/tmp/metadata.txt"
    content: "{{ lookup('template', 'node_inv.j2') | to_nice_json  }}"
  become: true
  vars:
    query: nodes[{{ node_inv_offset + 3 }}:{{worker_index}}]
    node: worker
    ip_nth: 3 # Already assigned 3 master IPs

- name: read env file
  slurp:
    src: "/tmp/metadata.txt"
  register: worker_content

- name: set inventory fact
  set_fact:
    deploying_worker_nodes_content: "{{ worker_content['content'] | b64decode | from_json }}"

- name: set fact for worker mgmt
  set_fact:
    worker_mgmts: "{{ ocp_node_content| json_query(query)}}"
  vars:
    query: nodes[{{ node_inv_offset + 3}}:{{worker_index}}].pm_addr

# Make sure required number of workers are available (useful when user passes wrong worker_count value)
- name: Fail when required number of worker nodes cannot be provisioned
  fail:
    msg: Required number of nodes are not available for workers
  when: worker_mgmts | length < worker_count | int

# Needed in case where lists are constructed in a loop that might never be run 
# if with_items list is empty
- name: Set fact for empty zero worker
  set_fact:
    worker_types: []
    worker_vendors: []
    master_types: []
    master_vendors: []
    dell_workers: []
    supermicro_workers: []
    dell_masters: []
    supermicro_masters: []
    master_fqdns: []
    worker_fqdns: []
    non_deploy_worker_fqdns: []

- name: Set master FQDNs
  set_fact:
    master_fqdns: "{{ master_fqdns + [ item |  replace('mgmt-','') | replace('-drac', '') ] }}"
  with_items:
    - "{{ master_mgmts }}"

- name: Set worker FQDNs
  set_fact:
    worker_fqdns: "{{ worker_fqdns + [ item |  replace('mgmt-','') | replace('-drac', '') ] }}"
  with_items:
    - "{{ worker_mgmts }}"

- name: set fact for non deploying worker mgmt
  set_fact:
    non_deploy_worker_mgmts: "{{ ocp_node_content| json_query(query)}}"
  vars:
    query: nodes[{{worker_index}}:].pm_addr

- name: Set non_deploy_worker FQDNs
  set_fact:
    non_deploy_worker_fqdns: "{{ non_deploy_worker_fqdns + [ item |  replace('mgmt-','') | replace('-drac', '') ] }}"
  with_items:
    - "{{ non_deploy_worker_mgmts }}"

- name: Set master and worker node types/vendors
  block:
    - name: Set worker node types
      set_fact:
        worker_types: "{{ worker_types + [ (lab_name == 'scale') | ternary(item.split('.')[0].split('-')[3], item.split('.')[0].split('-')[2]) ] }}"
      with_items:
        - "{{ worker_fqdns }}"
        - "{{ non_deploy_worker_fqdns }}"

    - name: Set worker node vendors
      set_fact:
        worker_vendors: "{{ worker_vendors + [(item in lab_vars['machine_types']['supermicro']) | ternary('supermicro', 'dell')] }}"
      with_items:
        - "{{ worker_types }}"

    - name: Set worker node dells (scale)
      set_fact:
        dell_workers: "{{ dell_workers + [ item ] }}"
      with_items:
        - "{{ worker_fqdns }}"
      when: lab_name == 'scale' and item.split('.')[0].split('-')[3] in lab_vars['machine_types']['dell']

    - name: Set worker node dells (alias)
      set_fact:
        dell_workers: "{{ dell_workers + [ item ] }}"
      with_items:
        - "{{ worker_fqdns }}"
      when: lab_name == 'alias' and item.split('.')[0].split('-')[2] in lab_vars['machine_types']['dell']

    - name: Set worker node supermicros (scale)
      set_fact:
        supermicro_workers: "{{ supermicro_workers + [ item ] }}"
      with_items:
        - "{{ worker_fqdns }}"
      when: lab_name == 'scale' and item.split('.')[0].split('-')[3] in lab_vars['machine_types']['supermicro']

    - name: Set worker node supermicros (alias)
      set_fact:
        supermicro_workers: "{{ supermicro_workers + [ item ] }}"
      with_items:
        - "{{ worker_fqdns }}"
      when: lab_name == 'alias' and item.split('.')[0].split('-')[2] in lab_vars['machine_types']['supermicro']

    # there are always 3 masters so master_fqdns is always non-empty
    # and loop will always be run so master_types is always defined
 
    - name: Set master node types
      set_fact:
        master_types: "{{ master_types + [ (lab_name == 'scale') | ternary(item.split('.')[0].split('-')[3], item.split('.')[0].split('-')[2]) ] }}"
      with_items:
        - "{{ master_fqdns }}"

    - name: Set master node vendors
      set_fact:
        master_vendors: "{{ master_vendors + [(item in lab_vars['machine_types']['supermicro']) | ternary('supermicro', 'dell')] }}"
      with_items:
        - "{{ master_types }}"

    - name: Set master node dells (scale)
      set_fact:
        dell_masters: "{{ dell_masters + [ item ] }}"
      with_items:
        - "{{ master_fqdns }}"
      when: lab_name == 'scale' and item.split('.')[0].split('-')[3] in lab_vars['machine_types']['dell']

    - name: Set master node dells (alias)
      set_fact:
        dell_masters: "{{ dell_masters + [ item ] }}"
      with_items:
        - "{{ master_fqdns }}"
      when: lab_name == 'alias' and item.split('.')[0].split('-')[2] in lab_vars['machine_types']['dell']

    - name: Set master node supermicros (scale)
      set_fact:
        supermicro_masters: "{{ supermicro_masters + [ item ] }}"
      with_items:
        - "{{ master_fqdns }}"
      when: lab_name == 'scale' and item.split('.')[0].split('-')[3] in lab_vars['machine_types']['supermicro']

    - name: Set master node supermicros (alias)
      set_fact:
        supermicro_masters: "{{ supermicro_masters + [ item ] }}"
      with_items:
        - "{{ master_fqdns }}"
      when: lab_name == 'alias' and item.split('.')[0].split('-')[2] in lab_vars['machine_types']['supermicro']

    - name: Set Dell nodes
      set_fact:
        dell_nodes: "{{ dell_masters + dell_workers }}"

    - name: Set Supermicro nodes
      set_fact:
        supermicro_nodes: "{{ supermicro_masters + supermicro_workers }}"
  vars:
    lab_vars: "{{ (lab_name == 'scale') | ternary(scale, alias) }}"
  when: lab_name in ['scale', 'alias']

- name: Fail when masters are non homogeneous
  fail:
    msg: "Master nodes should be Homogeneous, but identified these types - {{ master_types }}"
  when: master_types | unique | length > 1

- name: Set fact for rack for R640s
  set_fact:
    racks: "{{ racks | default([]) + [item.split('.')[0].split('-')[0]] }}"
  when: "'r640' in item.split('.')[0].split('-')"
  with_items:
    - "{{master_fqdns }}"

- name: Fail on different rack(f04)
  fail:
    msg: If one of the master nodes is in rack f04, all of them need to be in the same rack
  when: 
    - racks is defined
    - "'f04' in racks"
    - "racks | unique |  length > 1"

- name: Fail when worker nodes have R620s and R630s
  fail:
    msg: "Not a supported configuration for workers"
  when: "'r620' in worker_types and 'r630' in worker_types"

- name: set fact for master provisioning macs
  set_fact:
    master_prov_macs:  "{{ ocp_node_content| json_query('nodes[' ~ node_inv_offset ~ ':' ~ (node_inv_offset + 3) ~ '].mac[1]')}}"

# Works even in case of 0 workers as json_query returns empty list
- name: set fact for worker provisioning macs
  set_fact:
    worker_prov_macs:  "{{ ocp_node_content| json_query(query)}}"
  vars:
    query: nodes[{{ node_inv_offset + 3 }}:{{worker_index}}].mac[1]

- name: dump non deploying worker nodes to a file
  copy:
    dest: "/tmp/metadata.txt"
    content: "{{ lookup('template', 'node_inv.j2') | to_nice_json  }}"
  become: true
  vars:
    query: nodes[{{worker_index}}:] # We are missing the offset nodes
    node: worker
    ip_nth: "{{worker_index|int - node_inv_offset}}"
    wrkr_index: "{{worker_count|int}}"

- name: read env file
  slurp:
    src: "/tmp/metadata.txt"
  register: nd_worker_content

- name: set inventory fact
  set_fact:
    nondeploying_worker_nodes_content: "{{ nd_worker_content['content'] | b64decode | from_json }}"

- name: set ocp_deploying_node_content
  set_fact:
    ocp_deploying_node_content: "{{ deploying_master_nodes_content | combine({'nodes': deploying_master_nodes_content.nodes|union(deploying_worker_nodes_content.nodes)}, recursive=True) }}"
